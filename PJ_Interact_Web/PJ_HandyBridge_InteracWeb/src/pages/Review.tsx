// src/pages/Review.tsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "../components/common/Navbar";
import { FiStar } from "react-icons/fi";
import { useAuth } from "../contexts/AuthContext";
import { supabase } from "../lib/supabase";
import "./Review.css";

export default function Review() {
  const navigate = useNavigate();
  const { profile, user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [hoveredRating, setHoveredRating] = useState(0);

  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    newFeature: "",
    rating: 0,
    favoriteFeature: "",
    understandingLevel: "",
    feedback: "",
  });

  const [errors, setErrors] = useState<any>({});

  // Dropdown options
  const favoriteFeatures = [
    "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
    "AI Chatbot",
    "‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
    "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà",
    "‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  ];

  const understandingLevels = [
    "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏≠‡πÉ‡∏ä‡πâ",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡∏µ",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
  ];

  // Auto-fill user data
  useEffect(() => {
    if (profile && user) {
      setFormData((prev) => ({
        ...prev,
        fullName: profile.full_name || "",
        email: user.email || profile.email || "",
      }));
    }
  }, [profile, user]);

  const handleInputChange = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    setErrors((prev: any) => ({ ...prev, [field]: "" }));
  };

  const handleRatingClick = (rating: number) => {
    handleInputChange("rating", rating);
  };

  const validateForm = () => {
    const newErrors: any = {};

    if (!formData.fullName.trim()) {
      newErrors.fullName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•";
    }

    if (!formData.email.trim()) {
      newErrors.email = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    if (formData.rating === 0) {
      newErrors.rating = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsLoading(true);

    try {
      const { error } = await supabase.from("website_reviews").insert([
        {
          reviewer_name: formData.fullName,
          reviewer_email: formData.email,
          rating: formData.rating,
          new_feature_request: formData.newFeature,
          favorite_feature: formData.favoriteFeature,
          understanding_level: formData.understandingLevel,
          feedback: formData.feedback,
          user_id: user?.id || null,
          created_at: new Date().toISOString(),
        },
      ]);

      if (error) throw error;

      alert("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô! üôè");
      navigate("/");
    } catch (error) {
      console.error("Submit error:", error);
      setErrors({
        general: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="review-page">
      <Navbar />

      <main className="review-main">
        <div className="review-container">
          {/* Toggle Buttons */}
          <div className="page-toggle">
            <button
              className="toggle-btn"
              onClick={() => navigate("/submit-word")}
            >
              ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
            </button>
            <button className="toggle-btn active">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</button>
          </div>

          {/* Header */}
          <div className="review-header">
            <h1>‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô</h1>
            <p>
              ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏≤ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
              ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
              <br />
              ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°
              ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            </p>
          </div>

          {/* Form */}
          <form className="review-form" onSubmit={handleSubmit}>
            {errors.general && (
              <div className="error-message general">{errors.general}</div>
            )}

            {/* Row 1: ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡πÅ‡∏•‡∏∞ ‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
            <div className="form-row">
              <div className="form-field">
                <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•*</label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) =>
                    handleInputChange("fullName", e.target.value)
                  }
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≠‡∏£‡πå‡∏ô ‡∏™‡∏°‡∏¥‡∏ò"
                  className={errors.fullName ? "error" : ""}
                  disabled={isLoading}
                />
                {errors.fullName && (
                  <span className="error-text">{errors.fullName}</span>
                )}
              </div>

              <div className="form-field">
                <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•*</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô john@email.com"
                  className={errors.email ? "error" : ""}
                  disabled={isLoading}
                />
                {errors.email && (
                  <span className="error-text">{errors.email}</span>
                )}
              </div>
            </div>

            {/* Row 2: ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à */}
            <div className="form-row">
              <div className="form-field">
                <label>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°</label>
                <input
                  type="text"
                  value={formData.newFeature}
                  onChange={(e) =>
                    handleInputChange("newFeature", e.target.value)
                  }
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                  disabled={isLoading}
                />
              </div>

              <div className="form-field">
                <label>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (1-5 ‡∏î‡∏≤‡∏ß)*</label>
                <div className="rating-input-container">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <button
                      key={star}
                      type="button"
                      className={`star-btn ${
                        star <= (hoveredRating || formData.rating)
                          ? "active"
                          : ""
                      }`}
                      onClick={() => handleRatingClick(star)}
                      onMouseEnter={() => setHoveredRating(star)}
                      onMouseLeave={() => setHoveredRating(0)}
                      disabled={isLoading}
                    >
                      <FiStar />
                    </button>
                  ))}
                  <span className="rating-label">
                    {formData.rating > 0
                      ? `${formData.rating}/5`
                      : "/‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å"}
                  </span>
                </div>
                {errors.rating && (
                  <span className="error-text">{errors.rating}</span>
                )}
              </div>
            </div>

            {/* Row 3: Dropdowns */}
            <div className="form-row">
              <div className="form-field">
                <label>‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</label>
                <select
                  value={formData.favoriteFeature}
                  onChange={(e) =>
                    handleInputChange("favoriteFeature", e.target.value)
                  }
                  className="form-select"
                  disabled={isLoading}
                >
                  <option value="">‡πÄ‡∏ä‡πà‡∏ô AI Chatbot</option>
                  {favoriteFeatures.map((feature) => (
                    <option key={feature} value={feature}>
                      {feature}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-field">
                <label>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πá‡∏ö</label>
                <select
                  value={formData.understandingLevel}
                  onChange={(e) =>
                    handleInputChange("understandingLevel", e.target.value)
                  }
                  className="form-select"
                  disabled={isLoading}
                >
                  <option value="">‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏±‡πâ‡∏¢</option>
                  {understandingLevels.map((level) => (
                    <option key={level} value={level}>
                      {level}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Full Width: Feedback */}
            <div className="form-field full-width">
              <label>‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞</label>
              <textarea
                value={formData.feedback}
                onChange={(e) => handleInputChange("feedback", e.target.value)}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ, ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, AI ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
                className="feedback-textarea"
                rows={4}
                disabled={isLoading}
              />
            </div>

            <button
              type="submit"
              className="submit-button"
              disabled={isLoading}
            >
              {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"}
            </button>
          </form>
        </div>
      </main>

      {isLoading && (
        <div className="loading-overlay">
          <div className="loading-spinner"></div>
        </div>
      )}
    </div>
  );
}
