// src/pages/Review.tsx - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "../components/common/Navbar";
import { FiStar } from "react-icons/fi";
import { FaStar } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { supabase } from "../lib/supabase";
import "./Review.css";

export default function Review() {
  const navigate = useNavigate();
  const { profile, user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [hoveredRating, setHoveredRating] = useState(0);
  const [existingReviewId, setExistingReviewId] = useState<string | null>(null);
  const [showLoginMessage, setShowLoginMessage] = useState(false); // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° state

  // ... (formData, errors, ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    newFeature: "",
    rating: 0,
    favoriteFeature: "",
    understandingLevel: "",
    review_comment: "",
  });

  const [errors, setErrors] = useState<any>({});

  const favoriteFeatures = [
    "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
    "AI Chatbot",
    "‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
    "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà",
    "‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  ];

  const understandingLevels = [
    "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏≠‡πÉ‡∏ä‡πâ",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡∏µ",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
  ];

  const getRatingText = (rating: number) => {
    const texts = {
      1: "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
      2: "‡∏û‡∏≠‡πÉ‡∏ä‡πâ",
      3: "‡∏î‡∏µ",
      4: "‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
      5: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å",
    };
    return texts[rating as keyof typeof texts] || "";
  };

  const checkExistingReview = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from("website_reviews")
        .select("*")
        .eq("user_id", user.id)
        .single();

      if (data && !error) {
        console.log("‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏î‡∏¥‡∏°:", data);
        setExistingReviewId(data.id);

        setFormData({
          fullName: data.reviewer_name || profile?.full_name || "",
          email: data.reviewer_email || user.email || "",
          newFeature: data.new_feature_request || "",
          rating: data.rating || 0,
          favoriteFeature: data.favorite_feature || "",
          understandingLevel: data.understanding_level || "",
          review_comment: data.review_comment || "",
        });
      }
    } catch (error) {
      console.log("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß");
    }
  };

  useEffect(() => {
    if (profile && user) {
      setFormData((prev) => ({
        ...prev,
        fullName: prev.fullName || profile.full_name || "",
        email: prev.email || user.email || profile.email || "",
      }));

      checkExistingReview();
    }
  }, [profile, user]);

  const handleInputChange = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    setErrors((prev: any) => ({ ...prev, [field]: "" }));
    setShowLoginMessage(false); // üî• ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  };

  const handleRatingClick = (rating: number) => {
    handleInputChange("rating", rating);
  };

  const validateForm = () => {
    const newErrors: any = {};

    if (!formData.fullName.trim()) {
      newErrors.fullName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•";
    }

    if (!formData.email.trim()) {
      newErrors.email = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    if (formData.rating === 0) {
      newErrors.rating = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô";
    }

    if (!formData.review_comment.trim()) {
      newErrors.review_comment = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡∏ï‡πå";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login ‡∏Å‡πà‡∏≠‡∏ô
    if (!user) {
      setShowLoginMessage(true);
      setErrors({});
      return;
    }

    if (!validateForm()) return;

    setIsLoading(true);

    try {
      const reviewData = {
        reviewer_name: formData.fullName,
        reviewer_email: formData.email,
        rating: formData.rating,
        new_feature_request: formData.newFeature || null,
        favorite_feature: formData.favoriteFeature || null,
        understanding_level: formData.understandingLevel || null,
        review_comment: formData.review_comment,
        user_id: user?.id || null,
      };

      if (existingReviewId) {
        const { data: updatedData, error } = await supabase
          .from("website_reviews")
          .update({
            ...reviewData,
            updated_at: new Date().toISOString(),
          })
          .eq("id", existingReviewId)
          .eq("user_id", user?.id)
          .select()
          .single();

        if (error) throw error;

        alert("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üôè");
      } else {
        const { data: insertedData, error } = await supabase
          .from("website_reviews")
          .insert([
            {
              ...reviewData,
              created_at: new Date().toISOString(),
            },
          ])
          .select()
          .single();

        if (error) throw error;

        alert("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô! üôè");
      }

      navigate("/");
    } catch (error: any) {
      console.error("Submit error:", error);
      setErrors({
        general: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"}`,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="review-page">
      <Navbar />

      <main className="review-main">
        <div className="review-container">
          <div className="page-toggle">
            <button
              className="toggle-btn"
              onClick={() => navigate("/submit-word")}
            >
              ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
            </button>
            <button className="toggle-btn active">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</button>
          </div>

          <div className="review-header">
            <h1>
              {existingReviewId
                ? "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                : "‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"}
            </h1>
            <p>
              {existingReviewId
                ? "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ"
                : "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏≤ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"}
              <br />
              {!existingReviewId &&
                "‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"}
            </p>
          </div>

          <form className="review-form" onSubmit={handleSubmit}>
            {/* üî• ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° login */}
            {showLoginMessage && (
              <div className="login-required-message">
                <p>
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤{" "}
                  <button
                    type="button"
                    className="login-link"
                    onClick={() => navigate("/auth?mode=login")}
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </button>{" "}
                  ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
                </p>
              </div>
            )}

            {errors.general && (
              <div className="error-message general">{errors.general}</div>
            )}

            {/* Form fields ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
            <div className="form-row">
              <div className="form-field">
                <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•*</label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) =>
                    handleInputChange("fullName", e.target.value)
                  }
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≠‡∏£‡πå‡∏ô ‡∏™‡∏°‡∏¥‡∏ò"
                  className={errors.fullName ? "error" : ""}
                  disabled={isLoading}
                />
                {errors.fullName && (
                  <span className="error-text">{errors.fullName}</span>
                )}
              </div>

              <div className="form-field">
                <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•*</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô john@email.com"
                  className={errors.email ? "error" : ""}
                  disabled={isLoading}
                />
                {errors.email && (
                  <span className="error-text">{errors.email}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-field">
                <label>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°</label>
                <input
                  type="text"
                  value={formData.newFeature}
                  onChange={(e) =>
                    handleInputChange("newFeature", e.target.value)
                  }
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                  disabled={isLoading}
                />
              </div>

              <div className="form-field">
                <label>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (1-5 ‡∏î‡∏≤‡∏ß)*</label>
                <div className="rating-input-container">
                  <div className="stars-wrapper">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <button
                        key={star}
                        type="button"
                        className={`star-btn ${
                          star <= (hoveredRating || formData.rating)
                            ? "active"
                            : ""
                        }`}
                        onClick={() => handleRatingClick(star)}
                        onMouseEnter={() => setHoveredRating(star)}
                        onMouseLeave={() => setHoveredRating(0)}
                        disabled={isLoading}
                      >
                        {star <= (hoveredRating || formData.rating) ? (
                          <FaStar />
                        ) : (
                          <FiStar />
                        )}
                      </button>
                    ))}
                  </div>
                  <div className="rating-label">
                    {(hoveredRating || formData.rating) > 0 ? (
                      <span className="rating-value">
                        {hoveredRating || formData.rating}/
                        {getRatingText(hoveredRating || formData.rating)}
                      </span>
                    ) : (
                      <span className="rating-placeholder">/‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å</span>
                    )}
                  </div>
                </div>
                {errors.rating && (
                  <span className="error-text">{errors.rating}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-field">
                <label>‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</label>
                <select
                  value={formData.favoriteFeature}
                  onChange={(e) =>
                    handleInputChange("favoriteFeature", e.target.value)
                  }
                  className="form-select"
                  disabled={isLoading}
                >
                  <option value="">‡πÄ‡∏ä‡πà‡∏ô AI Chatbot</option>
                  {favoriteFeatures.map((feature) => (
                    <option key={feature} value={feature}>
                      {feature}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-field">
                <label>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πá‡∏ö</label>
                <select
                  value={formData.understandingLevel}
                  onChange={(e) =>
                    handleInputChange("understandingLevel", e.target.value)
                  }
                  className="form-select"
                  disabled={isLoading}
                >
                  <option value="">‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏±‡πâ‡∏¢</option>
                  {understandingLevels.map((level) => (
                    <option key={level} value={level}>
                      {level}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="form-field full-width">
              <label>‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞*</label>
              <textarea
                value={formData.review_comment}
                onChange={(e) =>
                  handleInputChange("review_comment", e.target.value)
                }
                placeholder="‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤..."
                className={`feedback-textarea ${
                  errors.review_comment ? "error" : ""
                }`}
                rows={2}
                disabled={isLoading}
              />
              {errors.review_comment && (
                <span className="error-text">{errors.review_comment}</span>
              )}
            </div>

            <button
              type="submit"
              className="submit-button"
              disabled={isLoading}
            >
              {isLoading
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."
                : existingReviewId
                ? "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"
                : "‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"}
            </button>
          </form>
        </div>
      </main>

      {isLoading && (
        <div className="loading-overlay">
          <div className="loading-spinner"></div>
        </div>
      )}
    </div>
  );
}
