// src/pages/Search.tsx
import React, { useState } from "react";
import Navbar from "../components/common/Navbar";
import Footer from "../components/common/Footer";
import { FiChevronDown, FiSearch } from "react-icons/fi";
import "./Search.css";

// Mock Data
const MOCK_SIGNS = [
  { id: 1, category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", word: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" },
  { id: 2, category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", word: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ: ‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô" },
  {
    id: 3,
    category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢",
    word: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ: ‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™ ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏π‡∏á",
  },
  { id: 4, category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", word: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì" },
  { id: 5, category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", word: "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©" },
  { id: 6, category: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", word: "‡∏û‡πà‡∏≠" },
  { id: 7, category: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", word: "‡πÅ‡∏°‡πà" },
  { id: 8, category: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", word: "‡∏û‡∏µ‡πà" },
  { id: 9, category: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", word: "‡∏ô‡πâ‡∏≠‡∏á" },
  { id: 10, category: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", word: "‡∏Ç‡πâ‡∏≤‡∏ß" },
  { id: 11, category: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", word: "‡∏ô‡πâ‡∏≥" },
  { id: 12, category: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", word: "‡∏≠‡∏£‡πà‡∏≠‡∏¢" },
  { id: 13, category: "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", word: "‡∏î‡∏µ‡πÉ‡∏à" },
  { id: 14, category: "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", word: "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à" },
  { id: 15, category: "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", word: "‡πÇ‡∏Å‡∏£‡∏ò" },
];

const CATEGORIES = ["‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"];

export default function Search() {
  const [searchMode, setSearchMode] = useState<"text" | "hand">("text");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢");
  const [visibleCount, setVisibleCount] = useState(10);

  // Filter signs
  const filteredSigns = MOCK_SIGNS.filter((sign) => {
    const matchesSearch = sign.word
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    return matchesSearch;
  });

  const displayedSigns = filteredSigns.slice(0, visibleCount);

  const handleLoadMore = () => {
    setVisibleCount((prev) => prev + 10);
  };

  return (
    <div className="search-page">
      <Navbar />

      <main className="search-main">
        {/* Header */}
        <div className="search-header">
          <h1>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</h1>
        </div>

        {/* Search Section */}
        <div className="search-section">
          {/* Toggle Text/Hand */}
          <div className="search-toggle">
            <button
              className={`toggle-option ${
                searchMode === "text" ? "active" : ""
              }`}
              onClick={() => setSearchMode("text")}
            >
              <img
                src="/src/assets/icons/text-icon.png"
                alt="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                className="toggle-icon"
              />
            </button>
            <button
              className={`toggle-option ${
                searchMode === "hand" ? "active" : ""
              }`}
              onClick={() => setSearchMode("hand")}
            >
              <img
                src="/src/assets/icons/hand-icon.png"
                alt="‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏≠"
                className="toggle-icon"
              />
            </button>
          </div>

          {/* Search Bar with Category Dropdown */}
          <div className="search-bar-container">
            <div className="search-input-wrapper">
              <FiSearch className="search-icon" />
              <input
                type="text"
                className="search-input"
                placeholder="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>

            <div className="category-select-wrapper">
              <select
                className="category-select"
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
              >
                {CATEGORIES.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
              <FiChevronDown className="select-arrow" />
            </div>
          </div>
        </div>

        {/* üî• Content Container - ‡∏Ñ‡∏£‡∏≠‡∏ö results + grid + button */}
        <div className="search-content-container">
          {/* Results Count */}
          <div className="results-info">
            <p>‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {filteredSigns.length.toLocaleString()} ‡∏Ñ‡∏≥</p>
          </div>

          {/* Results Grid */}
          <div className="search-results-grid">
            {displayedSigns.map((sign) => (
              <div key={sign.id} className="search-sign-card">
                <div className="search-card-video">
                  <div className="video-placeholder">
                    {/* Placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GIF/Video ‡∏à‡∏≤‡∏Å API */}
                  </div>
                </div>
                <div className="search-card-content">
                  <p className="search-card-category">{sign.category}</p>
                  <p className="search-card-word">{sign.word}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Load More Button */}
          {visibleCount < filteredSigns.length && (
            <div className="load-more-container">
              <button className="load-more-btn" onClick={handleLoadMore}>
                ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
              </button>
            </div>
          )}
        </div>
      </main>

      <Footer />
    </div>
  );
}
