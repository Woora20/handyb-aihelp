// src/services/submitWordService.ts
import { supabase } from '../lib/supabase';

export interface SubmittedWord {
  word_text: string;
  video_url?: string;
  video_file?: File;  // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
  gif_url?: string;   // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°: URL ‡∏Ç‡∏≠‡∏á GIF
  description?: string;
  submitter_name: string;
  submitter_email: string;
  user_id?: string;
}

export interface SubmittedWordDB extends SubmittedWord {
  id: string;
  status: 'pending' | 'approved' | 'rejected';
  created_at: string;
  updated_at: string;
}

export class SubmitWordService {
  /**
   * ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠ GIF ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
   */
  async uploadVideo(file: File): Promise<string> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
      const validTypes = ['video/mp4', 'video/webm', 'video/quicktime', 'image/gif'];
      if (!validTypes.includes(file.type)) {
        throw new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå MP4, WebM, MOV ‡∏´‡∏£‡∏∑‡∏≠ GIF');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (50MB)
      const maxSize = 50 * 1024 * 1024;
      if (file.size > maxSize) {
        throw new Error('‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50MB');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(7);
      const fileExt = file.name.split('.').pop();
      const fileName = `${timestamp}-${randomString}.${fileExt}`;
      const filePath = `submissions/${fileName}`;
      
      console.log('Uploading file:', fileName);

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
      const { data, error } = await supabase.storage
        .from('word-videos')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false,
          contentType: file.type
        });

      if (error) {
        console.error('Upload error:', error);
        throw error;
      }

      // ‡∏î‡∏∂‡∏á Public URL
      const { data: { publicUrl } } = supabase.storage
        .from('word-videos')
        .getPublicUrl(filePath);

      console.log('Upload successful:', publicUrl);
      return publicUrl;

    } catch (error) {
      console.error('Upload error:', error);
      throw new Error(error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô GIF ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isGifUrl(url: string): boolean {
    return url.toLowerCase().endsWith('.gif') || 
           url.toLowerCase().includes('.gif?') ||
           url.includes('giphy.com') ||
           url.includes('tenor.com');
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
   */
  async submitWord(data: SubmittedWord): Promise<void> {
    try {
      let videoUrl = data.video_url;
      let gifUrl = data.gif_url;

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
      if (data.video_file) {
        console.log('Uploading video file...');
        videoUrl = await this.uploadVideo(data.video_file);
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô GIF ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.isGifUrl(videoUrl)) {
          gifUrl = videoUrl;
        }
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const { error } = await supabase
        .from('submitted_words')
        .insert([{
          word_text: data.word_text,
          video_url: videoUrl,
          gif_url: gifUrl,
          description: data.description,
          submitter_name: data.submitter_name,
          submitter_email: data.submitter_email,
          user_id: data.user_id,
          status: 'pending',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }]);

      if (error) {
        console.error('Database insert error:', error);
        throw error;
      }

      console.log('Word submitted successfully');
    } catch (error) {
      console.error('Submit error:', error);
      throw new Error(error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
   */
  async getSubmissions(): Promise<SubmittedWordDB[]> {
    try {
      const { data, error } = await supabase
        .from('submitted_words')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      return data as SubmittedWordDB[];
    } catch (error) {
      console.error('Fetch error:', error);
      return [];
    }
  }

  /**
   * ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Storage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö)
   */
  async deleteVideo(videoUrl: string): Promise<boolean> {
    try {
      // ‡∏î‡∏∂‡∏á path ‡∏à‡∏≤‡∏Å URL
      const urlParts = videoUrl.split('/word-videos/');
      if (urlParts.length < 2) return false;
      
      const filePath = urlParts[1];

      const { error } = await supabase.storage
        .from('word-videos')
        .remove([filePath]);

      if (error) {
        console.error('Delete error:', error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('Delete error:', error);
      return false;
    }
  }
}

export const submitWordService = new SubmitWordService();